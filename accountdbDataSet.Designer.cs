// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace MilkTeaOrderAndInventorySystem
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("accountdbDataSet")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class accountdbDataSet : DataSet
    {

        private usercartDataTable tableusercart;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public accountdbDataSet() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected accountdbDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["usercart"] is not null)
                {
                    base.Tables.Add(new usercartDataTable(ds.Tables["usercart"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public usercartDataTable usercart
        {
            get
            {
                return tableusercart;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override DataSet Clone()
        {
            accountdbDataSet cln = (accountdbDataSet)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["usercart"] is not null)
                {
                    base.Tables.Add(new usercartDataTable(ds.Tables["usercart"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableusercart = (usercartDataTable)base.Tables["usercart"];
            if (initTable == true)
            {
                if (tableusercart is not null)
                {
                    tableusercart.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass()
        {
            DataSetName = "accountdbDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/accountdbDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableusercart = new usercartDataTable();
            base.Tables.Add(tableusercart);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeusercart()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new accountdbDataSet();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;

                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {


                            }
                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void usercartRowChangeEventHandler(object sender, usercartRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class usercartDataTable : TypedTableBase<usercartRow>
        {

            private DataColumn columncID;

            private DataColumn columnuID;

            private DataColumn columnsID;

            private DataColumn columnprodPic;

            private DataColumn columnprodName;

            private DataColumn columnprodPrice;

            private DataColumn columnprodQuan;

            private DataColumn columnprodSubT;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartDataTable() : base()
            {
                TableName = "usercart";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal usercartDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected usercartDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn cIDColumn
            {
                get
                {
                    return columncID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn uIDColumn
            {
                get
                {
                    return columnuID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn sIDColumn
            {
                get
                {
                    return columnsID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prodPicColumn
            {
                get
                {
                    return columnprodPic;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prodNameColumn
            {
                get
                {
                    return columnprodName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prodPriceColumn
            {
                get
                {
                    return columnprodPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prodQuanColumn
            {
                get
                {
                    return columnprodQuan;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prodSubTColumn
            {
                get
                {
                    return columnprodSubT;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRow this[int index]
            {
                get
                {
                    return (usercartRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event usercartRowChangeEventHandler usercartRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event usercartRowChangeEventHandler usercartRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event usercartRowChangeEventHandler usercartRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event usercartRowChangeEventHandler usercartRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddusercartRow(usercartRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRow AddusercartRow(int uID, int sID, byte[] prodPic, string prodName, string prodPrice, string prodQuan, string prodSubT)
            {
                usercartRow rowusercartRow = (usercartRow)NewRow();
                object[] columnValuesArray = new object[] { null, uID, sID, prodPic, prodName, prodPrice, prodQuan, prodSubT };
                rowusercartRow.ItemArray = columnValuesArray;
                Rows.Add(rowusercartRow);
                return rowusercartRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRow FindBycID(int cID)
            {
                return (usercartRow)Rows.Find(new object[] { cID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                usercartDataTable cln = (usercartDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new usercartDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columncID = Columns["cID"];
                columnuID = Columns["uID"];
                columnsID = Columns["sID"];
                columnprodPic = Columns["prodPic"];
                columnprodName = Columns["prodName"];
                columnprodPrice = Columns["prodPrice"];
                columnprodQuan = Columns["prodQuan"];
                columnprodSubT = Columns["prodSubT"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columncID = new DataColumn("cID", typeof(int), null, MappingType.Element);
                Columns.Add(columncID);
                columnuID = new DataColumn("uID", typeof(int), null, MappingType.Element);
                Columns.Add(columnuID);
                columnsID = new DataColumn("sID", typeof(int), null, MappingType.Element);
                Columns.Add(columnsID);
                columnprodPic = new DataColumn("prodPic", typeof(byte[]), null, MappingType.Element);
                Columns.Add(columnprodPic);
                columnprodName = new DataColumn("prodName", typeof(string), null, MappingType.Element);
                Columns.Add(columnprodName);
                columnprodPrice = new DataColumn("prodPrice", typeof(string), null, MappingType.Element);
                Columns.Add(columnprodPrice);
                columnprodQuan = new DataColumn("prodQuan", typeof(string), null, MappingType.Element);
                Columns.Add(columnprodQuan);
                columnprodSubT = new DataColumn("prodSubT", typeof(string), null, MappingType.Element);
                Columns.Add(columnprodSubT);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columncID }, true));
                columncID.AutoIncrement = true;
                columncID.AutoIncrementSeed = -1;
                columncID.AutoIncrementStep = -1;
                columncID.AllowDBNull = false;
                columncID.Unique = true;
                columnuID.AllowDBNull = false;
                columnsID.AllowDBNull = false;
                columnprodPic.AllowDBNull = false;
                columnprodName.AllowDBNull = false;
                columnprodName.MaxLength = 50;
                columnprodPrice.AllowDBNull = false;
                columnprodPrice.MaxLength = 45;
                columnprodQuan.MaxLength = 10;
                columnprodSubT.MaxLength = 10;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRow NewusercartRow()
            {
                return (usercartRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new usercartRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(usercartRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (usercartRowChanged is not null)
                {
                    usercartRowChanged?.Invoke(this, new usercartRowChangeEvent((usercartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (usercartRowChanging is not null)
                {
                    usercartRowChanging?.Invoke(this, new usercartRowChangeEvent((usercartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (usercartRowDeleted is not null)
                {
                    usercartRowDeleted?.Invoke(this, new usercartRowChangeEvent((usercartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (usercartRowDeleting is not null)
                {
                    usercartRowDeleting?.Invoke(this, new usercartRowChangeEvent((usercartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveusercartRow(usercartRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new accountdbDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "usercartDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;

                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {


                                }
                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class usercartRow : DataRow
        {

            private usercartDataTable tableusercart;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal usercartRow(DataRowBuilder rb) : base(rb)
            {
                tableusercart = (usercartDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int cID
            {
                get
                {
                    return Conversions.ToInteger(this[tableusercart.cIDColumn]);
                }
                set
                {
                    this[tableusercart.cIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int uID
            {
                get
                {
                    return Conversions.ToInteger(this[tableusercart.uIDColumn]);
                }
                set
                {
                    this[tableusercart.uIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int sID
            {
                get
                {
                    return Conversions.ToInteger(this[tableusercart.sIDColumn]);
                }
                set
                {
                    this[tableusercart.sIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public byte[] prodPic
            {
                get
                {
                    return (byte[])this[tableusercart.prodPicColumn];
                }
                set
                {
                    this[tableusercart.prodPicColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string prodName
            {
                get
                {
                    return Conversions.ToString(this[tableusercart.prodNameColumn]);
                }
                set
                {
                    this[tableusercart.prodNameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string prodPrice
            {
                get
                {
                    return Conversions.ToString(this[tableusercart.prodPriceColumn]);
                }
                set
                {
                    this[tableusercart.prodPriceColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string prodQuan
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableusercart.prodQuanColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'prodQuan' in table 'usercart' is DBNull.", e);
                    }
                }
                set
                {
                    this[tableusercart.prodQuanColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string prodSubT
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableusercart.prodSubTColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'prodSubT' in table 'usercart' is DBNull.", e);
                    }
                }
                set
                {
                    this[tableusercart.prodSubTColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsprodQuanNull()
            {
                return IsNull(tableusercart.prodQuanColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetprodQuanNull()
            {
                this[tableusercart.prodQuanColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsprodSubTNull()
            {
                return IsNull(tableusercart.prodSubTColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetprodSubTNull()
            {
                this[tableusercart.prodSubTColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class usercartRowChangeEvent : EventArgs
        {

            private usercartRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRowChangeEvent(usercartRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace accountdbDataSetTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class usercartTableAdapter : System.ComponentModel.Component
        {

            private MySql.Data.MySqlClient.MySqlDataAdapter __adapter;

            private MySql.Data.MySqlClient.MySqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private MySql.Data.MySqlClient.MySqlConnection _connection;

            private MySql.Data.MySqlClient.MySqlTransaction _transaction;

            private MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public usercartTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal MySql.Data.MySqlClient.MySqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MySql.Data.MySqlClient.MySqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection = value;
                        }
                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MySql.Data.MySqlClient.MySqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }
                    if (Adapter is not null && Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MySql.Data.MySqlClient.MySqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new MySql.Data.MySqlClient.MySqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "usercart";
                tableMapping.ColumnMappings.Add("cID", "cID");
                tableMapping.ColumnMappings.Add("uID", "uID");
                tableMapping.ColumnMappings.Add("sID", "sID");
                tableMapping.ColumnMappings.Add("prodPic", "prodPic");
                tableMapping.ColumnMappings.Add("prodName", "prodName");
                tableMapping.ColumnMappings.Add("prodPrice", "prodPrice");
                tableMapping.ColumnMappings.Add("prodQuan", "prodQuan");
                tableMapping.ColumnMappings.Add("prodSubT", "prodSubT");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new MySql.Data.MySqlClient.MySqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM `usercart` WHERE ((`cID` = @p1) AND (`uID` = @p2) AND (`sID` = @p3) A" + "ND (`prodName` = @p4) AND (`prodPrice` = @p5) AND ((@p6 = 1 AND `prodQuan` IS NU" + "LL) OR (`prodQuan` = @p7)) AND ((@p8 = 1 AND `prodSubT` IS NULL) OR (`prodSubT` " + "= @p9)))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                var param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p1";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "cID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p2";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "uID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p3";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "sID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p4";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodName";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p5";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodPrice";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p6";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int32;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Original;
                param.SourceColumnNullMapping = true;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p7";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p8";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int32;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Original;
                param.SourceColumnNullMapping = true;
                _adapter.DeleteCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p9";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.DeleteCommand.Parameters.Add(param);
                _adapter.InsertCommand = new MySql.Data.MySqlClient.MySqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO `usercart` (`uID`, `sID`, `prodPic`, `prodName`, `prodPrice`, `prodQu" + "an`, `prodSubT`) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7)";
                _adapter.InsertCommand.CommandType = CommandType.Text;
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p1";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "uID";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p2";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "sID";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p3";
                param.DbType = DbType.Object;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Blob;
                param.IsNullable = true;
                param.SourceColumn = "prodPic";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p4";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodName";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p5";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodPrice";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p6";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p7";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.InsertCommand.Parameters.Add(param);
                _adapter.UpdateCommand = new MySql.Data.MySqlClient.MySqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE `usercart` SET `uID` = @p1, `sID` = @p2, `prodPic` = @p3, `prodName` = @p4" + ", `prodPrice` = @p5, `prodQuan` = @p6, `prodSubT` = @p7 WHERE ((`cID` = @p8) AND" + " (`uID` = @p9) AND (`sID` = @p10) AND (`prodName` = @p11) AND (`prodPrice` = @p1" + "2) AND ((@p13 = 1 AND `prodQuan` IS NULL) OR (`prodQuan` = @p14)) AND ((@p15 = 1" + " AND `prodSubT` IS NULL) OR (`prodSubT` = @p16)))";



                _adapter.UpdateCommand.CommandType = CommandType.Text;
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p1";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "uID";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p2";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "sID";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p3";
                param.DbType = DbType.Object;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Blob;
                param.IsNullable = true;
                param.SourceColumn = "prodPic";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p4";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodName";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p5";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodPrice";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p6";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p7";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Current;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p8";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "cID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p9";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "uID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p10";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int24;
                param.IsNullable = true;
                param.SourceColumn = "sID";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p11";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodName";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p12";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodPrice";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p13";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int32;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Original;
                param.SourceColumnNullMapping = true;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p14";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodQuan";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p15";
                param.DbType = DbType.Int32;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.Int32;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Original;
                param.SourceColumnNullMapping = true;
                _adapter.UpdateCommand.Parameters.Add(param);
                param = new MySql.Data.MySqlClient.MySqlParameter();
                param.ParameterName = "@p16";
                param.DbType = DbType.String;
                param.MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.VarChar;
                param.IsNullable = true;
                param.SourceColumn = "prodSubT";
                param.SourceVersion = DataRowVersion.Original;
                _adapter.UpdateCommand.Parameters.Add(param);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new MySql.Data.MySqlClient.MySqlConnection();
                _connection.ConnectionString = My.MySettings.Default.accountdbConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new MySql.Data.MySqlClient.MySqlCommand[1];
                _commandCollection[0] = new MySql.Data.MySqlClient.MySqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT `cID`, `uID`, `sID`, `prodPic`, `prodName`, `prodPrice`, `prodQuan`, `prod" + "SubT` FROM `usercart`";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(accountdbDataSet.usercartDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual accountdbDataSet.usercartDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new accountdbDataSet.usercartDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(accountdbDataSet.usercartDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(accountdbDataSet dataSet)
            {
                return Adapter.Update(dataSet, "usercart");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int p1, int p2, int p3, string p4, string p5, string p7, string p9)
            {
                Adapter.DeleteCommand.Parameters[0].Value = p1;
                Adapter.DeleteCommand.Parameters[1].Value = p2;
                Adapter.DeleteCommand.Parameters[2].Value = p3;
                if (p4 is null)
                {
                    throw new ArgumentNullException("p4");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = p4;
                }
                if (p5 is null)
                {
                    throw new ArgumentNullException("p5");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = p5;
                }
                if (p7 is null)
                {
                    Adapter.DeleteCommand.Parameters[5].Value = 1;
                    Adapter.DeleteCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = 0;
                    Adapter.DeleteCommand.Parameters[6].Value = p7;
                }
                if (p9 is null)
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 1;
                    Adapter.DeleteCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 0;
                    Adapter.DeleteCommand.Parameters[8].Value = p9;
                }
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int p1, int p2, object p3, string p4, string p5, string p6, string p7)
            {
                Adapter.InsertCommand.Parameters[0].Value = p1;
                Adapter.InsertCommand.Parameters[1].Value = p2;
                if (p3 is null)
                {
                    throw new ArgumentNullException("p3");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = p3;
                }
                if (p4 is null)
                {
                    throw new ArgumentNullException("p4");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = p4;
                }
                if (p5 is null)
                {
                    throw new ArgumentNullException("p5");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = p5;
                }
                if (p6 is null)
                {
                    Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = p6;
                }
                if (p7 is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = p7;
                }
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int p1, int p2, object p3, string p4, string p5, string p6, string p7, int p8, int p9, int p10, string p11, string p12, string p14, string p16)
            {
                Adapter.UpdateCommand.Parameters[0].Value = p1;
                Adapter.UpdateCommand.Parameters[1].Value = p2;
                if (p3 is null)
                {
                    throw new ArgumentNullException("p3");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = p3;
                }
                if (p4 is null)
                {
                    throw new ArgumentNullException("p4");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = p4;
                }
                if (p5 is null)
                {
                    throw new ArgumentNullException("p5");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = p5;
                }
                if (p6 is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = p6;
                }
                if (p7 is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = p7;
                }
                Adapter.UpdateCommand.Parameters[7].Value = p8;
                Adapter.UpdateCommand.Parameters[8].Value = p9;
                Adapter.UpdateCommand.Parameters[9].Value = p10;
                if (p11 is null)
                {
                    throw new ArgumentNullException("p11");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = p11;
                }
                if (p12 is null)
                {
                    throw new ArgumentNullException("p12");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = p12;
                }
                if (p14 is null)
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 1;
                    Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 0;
                    Adapter.UpdateCommand.Parameters[13].Value = p14;
                }
                if (p16 is null)
                {
                    Adapter.UpdateCommand.Parameters[14].Value = 1;
                    Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = 0;
                    Adapter.UpdateCommand.Parameters[15].Value = p16;
                }
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private usercartTableAdapter _usercartTableAdapter;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public usercartTableAdapter usercartTableAdapter
            {
                get
                {
                    return _usercartTableAdapter;
                }
                set
                {
                    _usercartTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    if (_usercartTableAdapter is not null && _usercartTableAdapter.Connection is not null)
                    {
                        return _usercartTableAdapter.Connection;
                    }
                    return null;
                }
                set
                {
                    _connection = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_usercartTableAdapter is not null)
                    {
                        count = count + 1;
                    }
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateUpdatedRows(accountdbDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_usercartTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.usercart.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null && 0 < updatedRows.Length)
                    {
                        result = result + _usercartTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateInsertedRows(accountdbDataSet dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_usercartTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.usercart.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null && 0 < addedRows.Length)
                    {
                        result = result + _usercartTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateDeletedRows(accountdbDataSet dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_usercartTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.usercart.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null && 0 < deletedRows.Length)
                    {
                        result = result + _usercartTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null || updatedRows.Length < 1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null || allAddedRows.Count < 1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i < updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row) == false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i = i + 1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public virtual int UpdateAll(accountdbDataSet dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges() == false)
                {
                    return 0;
                }
                if (_usercartTableAdapter is not null && MatchTableAdapterConnection(_usercartTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" + "ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State & ConnectionState.Broken) == ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State == ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened = true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" + "ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet = new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_usercartTableAdapter is not null)
                    {
                        revertConnections.Add(_usercartTableAdapter, _usercartTableAdapter.Connection);
                        _usercartTableAdapter.Connection = (MySql.Data.MySqlClient.MySqlConnection)workConnection;
                        _usercartTableAdapter.Transaction = (MySql.Data.MySqlClient.MySqlTransaction)workTransaction;
                        if (_usercartTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _usercartTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_usercartTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
                    {
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result = result + UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                    if (0 < allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i = i + 1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (_usercartTableAdapter is not null)
                    {
                        _usercartTableAdapter.Connection = (MySql.Data.MySqlClient.MySqlConnection)revertConnections[_usercartTableAdapter];
                        _usercartTableAdapter.Transaction = null;
                    }
                    if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i < adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate = true;
                            i = i + 1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null || inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation = relation;
                    if (childFirst)
                    {
                        _childFirst = -1;
                    }
                    else
                    {
                        _childFirst = 1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance = 0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row] = row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null && traversedRows.ContainsKey(parent) == false)
                    {
                        distance = distance + 1;
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance == 0)
                    {
                        traversedRows.Clear();
                        traversedRows[row] = row;
                        parent = row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null && traversedRows.ContainsKey(parent) == false)
                        {
                            distance = distance + 1;
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst * distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null && root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}